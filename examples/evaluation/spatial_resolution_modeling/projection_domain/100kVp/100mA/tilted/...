import numpy as np
import glob
import matplotlib.pyplot as plt
from scipy.interpolate import UnivariateSpline, make_lsq_spline, CubicSpline, splrep, splev

thismA = 100
straight = 1 #0 means tilted
xfit = np.arange(984)
k = 5
smooth = 80
pos = {'pos1':0, 'pos2':491, 'pos3':180}
t = [5, 180, 491, 984-180, 984-5]
t = np.r_[(0,)*(k+1),
        t,
        (983,)*(k+1)]

if straight:
    shift_view = 0
    thisdata = np.genfromtxt('../../FWHM_straight_%d.txt'%thismA, delimiter=',')
else:
    shift_view = int((np.pi/2-np.arctan2(54.2, 211.91))*984/(2.*np.pi))
    thisdata = np.genfromtxt('../../FWHM_tiled_%d.txt'%thismA, delimiter=',')
shiftx = (thisdata[:,0])%984
#shiftx = (984-thisdata[:,0]+492-760+60)%984
plt.plot(shiftx, thisdata[:,1]*1.0239,'bx',label='emp-%dmA'%thismA, markersize=3)

y = [y for _, y in sorted(zip(shiftx, thisdata[:,1]))]
x = sorted(shiftx)
weights = np.ones(len(x))
for i in [0, 180, 491, 983-180, 983]:
    for ix in range(len(x)):
        if np.abs(x[ix]-i)<10:
            weights[ix] = 10.
#spl_emp = UnivariateSpline(x,y, w=weights,k=k)
#spl_emp.set_smoothing_factor(smooth)
spl_emp = splrep(x,y,w=weights,k=k,per=1,s=smooth,xb=0,xe=983)
#emp_fit = spl_emp(xfit)
emp_fit = splev(xfit, spl_emp)
plt.plot(xfit, emp_fit*1.0239,'b--',label='emp-fit-%dmA'%thismA, linewidth=4)

thisdata = np.genfromtxt('FWHM.txt', delimiter=',')
thisdata[:,0] = np.asarray(thisdata[:,0], int)
shiftx = (thisdata[:,0]+shift_view)%984
y = [y for _, y in sorted(zip(shiftx, thisdata[:,1]))]
x = sorted(shiftx)
y = np.array(y)
plt.plot(x,y*1.0239, 'rx',label='sim-%dmA'%thismA,  markersize=3)

#spl_sim = UnivariateSpline(x,y,k=5)
#spl_sim.set_smoothing_factor(smooth)
weights = np.ones(len(x))
for i in [0, 180, 491, 983-180, 983]:
    for ix in range(len(x)):
        if np.abs(x[ix]-i)<10:
            weights[ix] = 10.
y[-1] = y[0]
#spl_sim = UnivariateSpline(x,y, w=weights,k=k)
#spl_sim.set_smoothing_factor(smooth)
#spl_sim = CubicSpline(x,y,bc_type='periodic')
spl_sim = splrep(x,y,w=weights,k=k,per=1,s=smooth,xb=0,xe=983)
#bc_type='periodic'
sim_fit = splev(xfit, spl_sim)
plt.plot(xfit, sim_fit*1.0239,'r--',label='sim-fit-%dmA'%thismA, linewidth=4)

diff = np.abs(emp_fit-sim_fit)/emp_fit
maxerridx = np.argmax(diff)
print("pos(view) | emp | sim | diff")
for poskey, posval in pos.items():
    print(poskey, '(', posval,") | %.2f | %.2f | %.2f%%"%(emp_fit[posval], sim_fit[posval], 100.*diff[posval]))
#print("max error at view ", maxerridx)
print("maxErr", '(', maxerridx, ") | %.2f | %.2f | %.2f%%"%(emp_fit[maxerridx], sim_fit[maxerridx], 100.*diff[maxerridx]))

plt.xlabel('view number')
plt.ylabel('FWHM(mm)')
plt.legend(loc='best')
plt.title('FWHM in projection domain at different views')
plt.tight_layout()
plt.ylim(0,8)
plt.savefig('comp-%dmA.png'%thismA)
plt.show()
